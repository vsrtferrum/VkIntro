// Code generated by MockGen. DO NOT EDIT.
// Source: internal/input/input.go

// Package mock_input is a generated GoMock package.
package mock_input

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	field "github.com/vsrtferrum/VkIntro/internal/field"
)

// MockFilter is a mock of Filter interface.
type MockFilter struct {
	ctrl     *gomock.Controller
	recorder *MockFilterMockRecorder
}

// MockFilterMockRecorder is the mock recorder for MockFilter.
type MockFilterMockRecorder struct {
	mock *MockFilter
}

// NewMockFilter creates a new mock instance.
func NewMockFilter(ctrl *gomock.Controller) *MockFilter {
	mock := &MockFilter{ctrl: ctrl}
	mock.recorder = &MockFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilter) EXPECT() *MockFilterMockRecorder {
	return m.recorder
}

// GetField mocks base method.
func (m *MockFilter) GetField(arg0 field.Size) (field.Size, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetField", arg0)
	ret0, _ := ret[0].(field.Size)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetField indicates an expected call of GetField.
func (mr *MockFilterMockRecorder) GetField(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetField", reflect.TypeOf((*MockFilter)(nil).GetField), arg0)
}

// GetSize mocks base method.
func (m *MockFilter) GetSize() (field.Size, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSize")
	ret0, _ := ret[0].(field.Size)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSize indicates an expected call of GetSize.
func (mr *MockFilterMockRecorder) GetSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSize", reflect.TypeOf((*MockFilter)(nil).GetSize))
}

// GetStartAndEnd mocks base method.
func (m *MockFilter) GetStartAndEnd(arg0 field.StartAndEnd) field.StartAndEnd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStartAndEnd", arg0)
	ret0, _ := ret[0].(field.StartAndEnd)
	return ret0
}

// GetStartAndEnd indicates an expected call of GetStartAndEnd.
func (mr *MockFilterMockRecorder) GetStartAndEnd(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStartAndEnd", reflect.TypeOf((*MockFilter)(nil).GetStartAndEnd), arg0)
}
