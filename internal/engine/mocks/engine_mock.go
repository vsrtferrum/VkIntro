// Code generated by MockGen. DO NOT EDIT.
// Source: internal/engine/engine.go

// Package mock_engine is a generated GoMock package.
package mock_engine

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	engine "github.com/vsrtferrum/VkIntro/internal/engine"
	field "github.com/vsrtferrum/VkIntro/internal/field"
)

// MockEngineImplemetation is a mock of EngineImplemetation interface.
type MockEngineImplemetation struct {
	ctrl     *gomock.Controller
	recorder *MockEngineImplemetationMockRecorder
}

// MockEngineImplemetationMockRecorder is the mock recorder for MockEngineImplemetation.
type MockEngineImplemetationMockRecorder struct {
	mock *MockEngineImplemetation
}

// NewMockEngineImplemetation creates a new mock instance.
func NewMockEngineImplemetation(ctrl *gomock.Controller) *MockEngineImplemetation {
	mock := &MockEngineImplemetation{ctrl: ctrl}
	mock.recorder = &MockEngineImplemetationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngineImplemetation) EXPECT() *MockEngineImplemetationMockRecorder {
	return m.recorder
}

// Deikstra mocks base method.
func (m *MockEngineImplemetation) Deikstra(arg0 *field.Field) []*engine.List {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deikstra", arg0)
	ret0, _ := ret[0].([]*engine.List)
	return ret0
}

// Deikstra indicates an expected call of Deikstra.
func (mr *MockEngineImplemetationMockRecorder) Deikstra(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deikstra", reflect.TypeOf((*MockEngineImplemetation)(nil).Deikstra), arg0)
}

// getPos mocks base method.
func (m *MockEngineImplemetation) getPos(arg0, arg1, arg2 int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getPos", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	return ret0
}

// getPos indicates an expected call of getPos.
func (mr *MockEngineImplemetationMockRecorder) getPos(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getPos", reflect.TypeOf((*MockEngineImplemetation)(nil).getPos), arg0, arg1, arg2)
}

// logic mocks base method.
func (m *MockEngineImplemetation) logic(arg0 *[]int, arg1 *field.Field, arg2 [][]*engine.List, arg3 engine.Pair, arg4, arg5, arg6, arg7 int, arg8 bool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "logic", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(bool)
	return ret0
}

// logic indicates an expected call of logic.
func (mr *MockEngineImplemetationMockRecorder) logic(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "logic", reflect.TypeOf((*MockEngineImplemetation)(nil).logic), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}
